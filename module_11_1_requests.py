import requests

# URL сайта для получения данных
url = 'https://www.gosuslugi.ru/'

try:
    # Отправка GET-запроса на сайт
    response = requests.get(url)

    # Проверка успешности запроса (код состояния 200)
    response.raise_for_status()

    # Получение содержимого страницы (текст)
    page_content = response.text
    print("Содержимое страницы:\n", page_content[:500], "...\n")  # Выводим 500 символов страницы

    # Получение заголовков ответа сервера
    headers = response.headers
    print("Заголовки ответа:\n", headers, "\n")

    # Получение кодировки страницы
    encoding = response.encoding
    print("Кодировка страницы:", encoding, "\n")

except requests.exceptions.RequestException as e:
    print("Ошибка при выполнении запроса:", e)

# Библиотека requests значительно упрощает работу с HTTP-запросами в Python.
# До ее появления приходилось использовать громоздкие модули типа urllib,
# что делало код сложным и менее читаемым.

# Requests предоставляет удобный интерфейс для отправки запросов разных типов (GET, POST, PUT, DELETE и др.),
# обработки заголовков, данных, cookies, авторизации и многих других аспектов HTTP.

# Ключевые преимущества requests:

# 1. Простота и лаконичность:
#    - Отправка запроса в одну строку: response = requests.get('https://www.example.com')
#    - Доступ к данным через понятные атрибуты: response.text, response.status_code

# 2. Автоматическая обработка многих деталей:
#    - Разбор JSON/XML: response.json(), response.text
#    - Кодировки: requests сам определяет и использует нужную кодировку
#    - Перенаправления: автоматически обрабатывает редиректы

# 3. Расширенные возможности:
#    - Сессии: сохранение cookies и параметров между запросами
#    - Аутентификация: базовая, дайджест, OAuth и др.
#    - Прокси:  поддержка прокси-серверов
#    - Загрузка файлов:  удобная отправка файлов на сервер

# В итоге, requests делает работу с сетью в Python проще, понятнее и эффективнее, открывая широкие возможности для
# создания различных сетевых приложений, парсеров, API-клиентов и других инструментов.
