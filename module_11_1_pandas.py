import pandas as pd

# Чтение данных из csv-файла
data = pd.read_csv('data.csv')

# Просмотр первых строк данных
print("Первые 5 строк данных:\n", data.head())

# Основные статистики
print("\nОписательная статистика:\n", data.describe())

# Группировка данных по столбцу 'category' и подсчет средних значений
print("\nСредние значения по категориям:\n", data.groupby('category')[['price', 'quantity']].mean())

# Pandas предоставляет Python высокоуровневые структуры данных (Series, DataFrame)
# и широкий набор инструментов для работы с ними,
# что делает Python мощным инструментом для анализа и обработки данных.

# Ключевые преимущества pandas:

# 1. Удобные структуры данных:
#    - DataFrame: двумерные таблицы с индексацией,
#       позволяющие хранить и обрабатывать данные разных типов.
#    - Series: одномерные массивы с индексацией.

# 2. Чтение и запись данных из разных источников:
#    - Поддержка CSV, Excel, SQL баз данных, HTML, JSON и др.
#    -  pd.read_csv(), pd.read_excel(), pd.read_sql() -
#       простые функции для импорта данных

# 3. Мощные инструменты манипуляции с данными:
#    - Фильтрация, сортировка, группировка, агрегация, объединение таблиц
#    - data.sort_values(), data.groupby(), data.merge() и др.
#    -  -  делают обработку данных гибкой и эффективной.

# 4.  Встроенная функциональность для анализа:
#    -  data.describe() -  базовая статистика
#    -  Поддержка временных рядов
#    -  Инструменты визуализации (совместно с Matplotlib)

# 5.  Интеграция с другими библиотеками:
#     - NumPy:  использует NumPy массивы как основу
#     - Scikit-learn: удобная передача данных для машинного обучения

# В итоге, pandas превращает Python в полноценную среду
# для анализа данных, позволяя решать широкий спектр
# задач по очистке, преобразованию, анализу и визуализации данных.
